webpackJsonp([3],{

/***/ 41:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["default"] = initializeAccordions;
/*
*   This content is licensed according to the W3C Software License at
*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
*
*   Simple accordion pattern example
*/

function initializeAccordions() {
	Array.prototype.slice.call(document.querySelectorAll(".accordion")).forEach(function (accordion) {
		// Allow for multiple accordion sections to be expanded at the same time
		var allowMultiple = accordion.hasAttribute("data-allow-multiple");
		// Allow for each toggle to both open and close individually
		var allowToggle = allowMultiple ? allowMultiple : accordion.hasAttribute("data-allow-toggle");
		// Determine if the first section should be open by default
		var firstOpen = accordion.hasAttribute("data-first-open");

		// Create the array of toggle elements for the accordion group
		var triggers = Array.prototype.slice.call(accordion.querySelectorAll(".accordion__trigger"));
		var panels = Array.prototype.slice.call(accordion.querySelectorAll(".accordion__panel"));

		// Close all panels to begin, optionally leaving first one open
		for (var i = 0; i < panels.length; i++) {
			if (firstOpen && i == 0) {
				triggers[i].setAttribute("aria-expanded", "true");
				document.getElementById(triggers[i].getAttribute("aria-controls")).removeAttribute("hidden", "");
			} else {
				triggers[i].setAttribute("aria-expanded", "false");
				document.getElementById(triggers[i].getAttribute("aria-controls")).setAttribute("hidden", "");
			}
		}

		accordion.addEventListener("click", function (event) {
			var target = event.target;

			if (target.classList.contains("accordion__trigger")) {
				// Check if the current toggle is expanded.
				var isExpanded = target.getAttribute("aria-expanded") == "true";
				var active = accordion.querySelector('[aria-expanded="true"]');

				// without allowMultiple, close the open accordion
				if (!allowMultiple && active && active !== target) {
					// Set the expanded state on the triggering element
					active.setAttribute("aria-expanded", "false");
					// Hide the accordion sections, using aria-controls to specify the desired section
					document.getElementById(active.getAttribute("aria-controls")).setAttribute("hidden", "");

					// When toggling is not allowed, clean up disabled state
					if (!allowToggle) {
						active.removeAttribute("aria-disabled");
					}
				}

				if (!isExpanded) {
					// Set the expanded state on the triggering element
					target.setAttribute("aria-expanded", "true");
					// Hide the accordion sections, using aria-controls to specify the desired section
					document.getElementById(target.getAttribute("aria-controls")).removeAttribute("hidden");

					// If toggling is not allowed, set disabled state on trigger
					if (!allowToggle) {
						target.setAttribute("aria-disabled", "true");
					}
				} else if (allowToggle && isExpanded) {
					// Set the expanded state on the triggering element
					target.setAttribute("aria-expanded", "false");
					// Hide the accordion sections, using aria-controls to specify the desired section
					document.getElementById(target.getAttribute("aria-controls")).setAttribute("hidden", "");
				}

				event.preventDefault();
			}
		});

		// Bind keyboard behaviors on the main accordion container
		accordion.addEventListener("keydown", function (event) {
			var target = event.target;
			var key = event.which.toString();
			// 33 = Page Up, 34 = Page Down
			var ctrlModifier = event.ctrlKey && key.match(/33|34/);

			// Is this coming from an accordion header?
			if (target.classList.contains("accordion__trigger")) {
				// Up/ Down arrow and Control + Page Up/ Page Down keyboard operations
				// 38 = Up, 40 = Down
				if (key.match(/38|40/) || ctrlModifier) {
					var index = triggers.indexOf(target);
					var direction = key.match(/34|40/) ? 1 : -1;
					var length = triggers.length;
					var newIndex = (index + length + direction) % length;

					triggers[newIndex].focus();

					event.preventDefault();
				} else if (key.match(/35|36/)) {
					// 35 = End, 36 = Home keyboard operations
					switch (key) {
						// Go to first accordion
						case "36":
							triggers[0].focus();
							break;
						// Go to last accordion
						case "35":
							triggers[triggers.length - 1].focus();
							break;
					}

					event.preventDefault();
				}
			} else if (ctrlModifier) {
				// Control + Page Up/ Page Down keyboard operations
				// Catches events that happen inside of panels
				panels.forEach(function (panel, index) {
					if (panel.contains(target)) {
						triggers[index].focus();

						event.preventDefault();
					}
				});
			}
		});

		// Minor setup: will set disabled state, via aria-disabled, to an
		// expanded/ active accordion which is not allowed to be toggled close
		if (!allowToggle) {
			// Get the first expanded/ active accordion
			var expanded = accordion.querySelector('[aria-expanded="true"]');

			// If an expanded/ active accordion is found, disable
			if (expanded) {
				expanded.setAttribute("aria-disabled", "true");
			}
		}
	});
}

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL2FjY29yZGlvbi5qcyJdLCJuYW1lcyI6WyJpbml0aWFsaXplQWNjb3JkaW9ucyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImFjY29yZGlvbiIsImFsbG93TXVsdGlwbGUiLCJoYXNBdHRyaWJ1dGUiLCJhbGxvd1RvZ2dsZSIsImZpcnN0T3BlbiIsInRyaWdnZXJzIiwicGFuZWxzIiwiaSIsImxlbmd0aCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJpc0V4cGFuZGVkIiwiYWN0aXZlIiwicXVlcnlTZWxlY3RvciIsInByZXZlbnREZWZhdWx0Iiwia2V5Iiwid2hpY2giLCJ0b1N0cmluZyIsImN0cmxNb2RpZmllciIsImN0cmxLZXkiLCJtYXRjaCIsImluZGV4IiwiaW5kZXhPZiIsImRpcmVjdGlvbiIsIm5ld0luZGV4IiwiZm9jdXMiLCJwYW5lbCIsImV4cGFuZGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFBQTs7Ozs7OztBQU9lLFNBQVNBLG9CQUFULEdBQWdDO0FBQzlDQyxPQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUNFQyxJQURGLENBQ09DLFNBQVNDLGdCQUFULENBQTBCLFlBQTFCLENBRFAsRUFFRUMsT0FGRixDQUVVLFVBQVNDLFNBQVQsRUFBb0I7QUFDNUI7QUFDQSxNQUFJQyxnQkFBZ0JELFVBQVVFLFlBQVYsQ0FBdUIscUJBQXZCLENBQXBCO0FBQ0E7QUFDQSxNQUFJQyxjQUFjRixnQkFDZkEsYUFEZSxHQUVmRCxVQUFVRSxZQUFWLENBQXVCLG1CQUF2QixDQUZIO0FBR0E7QUFDQSxNQUFJRSxZ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O0FBK0NBO0FBQ0E7QUFDQSxNQUFJLENBQUNsQixXQUFMLEVBQWtCO0FBQ2pCO0FBQ0EsT0FBSStCLFdBQVdsQyxVQUFVb0IsYUFBVixDQUF3Qix3QkFBeEIsQ0FBZjs7QUFFQTtBQUNBLE9BQUljLFFBQUosRUFBYztBQUNiQSxhQUFTekIsWUFBVCxDQUFzQixlQUF0QixFQUF1QyxNQUF2QztBQUNBO0FBQ0Q7QUFDRCxFQTlJRjtBQWdKQSxDIiwiZmlsZSI6ImpzL2FjY29yZGlvbi5kNGUzZWQzYTgyMTM4ZGYzMjhmMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4qICAgVGhpcyBjb250ZW50IGlzIGxpY2Vuc2VkIGFjY29yZGluZyB0byB0aGUgVzNDIFNvZnR3YXJlIExpY2Vuc2UgYXRcbiogICBodHRwczovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnRcbipcbiogICBTaW1wbGUgYWNjb3JkaW9uIHBhdHRlcm4gZXhhbXBsZVxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFjY29yZGlvbnMoKSB7XG5cdEFycmF5LnByb3RvdHlwZS5zbGljZVxuXHRcdC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWNjb3JkaW9uXCIpKVxuXHRcdC5mb3JFYWNoKGZ1bmN0aW9uKGFjY29yZGlvbikge1xuXHRcdFx0Ly8gQWxsb3cgZm9yIG11bHRpcGxlIGFjY29yZGlvbiBzZWN0aW9ucyB0byBiZSBleHBhbmRlZCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0XHR2YXIgYWxsb3dNdWx0aXBsZSA9IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoXCJkYXRhLWFsbG93LW11bHRpcGxlXCIpO1xuXHRcdFx0Ly8gQWxsb3cgZm9yIGVhY2ggdG9nZ2xlIHRvIGJvdGggb3BlbiBhbmQgY2xvc2UgaW5kaXZpZHVhbGx5XG5cdFx0XHR2YXIgYWxsb3dUb2dnbGUgPSBhbGxvd011bHRpcGxlXG5cdFx0XHRcdD8gYWxsb3dNdWx0aXBsZVxuXHRcdFx0XHQ6IGFjY29yZGlvbi5oYXNBdHRyaWJ1dGUoXCJkYXRhLWFsbG93LXRvZ2dsZVwiKTtcblx0XHRcdC8vIERldGVybWluZSBpZiB0aGUgZmlyc3Qgc2VjdGlvbiBzaG91bGQgYmUgb3BlbiBieSBkZWZhdWx0XG5cdFx0XHR2YXIgZmlyc3RPcGVuID0gYWNjb3JkaW9uLmhhc0F0dHJpYnV0ZShcImRhdGEtZmlyc3Qtb3BlblwiKTtcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBhcnJheSBvZiB0b2dnbGUgZWxlbWVudHMgZm9yIHRoZSBhY2NvcmRpb24gZ3JvdXBcblx0XHRcdHZhciB0cmlnZ2VycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuXHRcdFx0XHRhY2NvcmRpb24ucXVlcnlTZWxlY3RvckFsbChcIi5hY2NvcmRpb25fX3RyaWdnZXJcIilcblx0XHRcdCk7XG5cdFx0XHR2YXIgcGFuZWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG5cdFx0XHRcdGFjY29yZGlvbi5xdWVyeVNlbGVjdG9yQWxsKFwiLmFjY29yZGlvbl9fcGFuZWxcIilcblx0XHRcdCk7XG5cblx0XHRcdC8vIENsb3NlIGFsbCBwYW5lbHMgdG8gYmVnaW4sIG9wdGlvbmFsbHkgbGVhdmluZyBmaXJzdCBvbmUgb3BlblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYW5lbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGZpcnN0T3BlbiAmJiBpID09IDApIHtcblx0XHRcdFx0XHR0cmlnZ2Vyc1tpXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwidHJ1ZVwiKTtcblx0XHRcdFx0XHRkb2N1bWVudFxuXHRcdFx0XHRcdFx0LmdldEVsZW1lbnRCeUlkKHRyaWdnZXJzW2ldLmdldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIikpXG5cdFx0XHRcdFx0XHQucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIsIFwiXCIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRyaWdnZXJzW2ldLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiKTtcblx0XHRcdFx0XHRkb2N1bWVudFxuXHRcdFx0XHRcdFx0LmdldEVsZW1lbnRCeUlkKHRyaWdnZXJzW2ldLmdldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIikpXG5cdFx0XHRcdFx0XHQuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIFwiXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGFjY29yZGlvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdFx0XHRpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFjY29yZGlvbl9fdHJpZ2dlclwiKSkge1xuXHRcdFx0XHRcdC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRvZ2dsZSBpcyBleHBhbmRlZC5cblx0XHRcdFx0XHR2YXIgaXNFeHBhbmRlZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIpID09IFwidHJ1ZVwiO1xuXHRcdFx0XHRcdHZhciBhY3RpdmUgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cblx0XHRcdFx0XHQvLyB3aXRob3V0IGFsbG93TXVsdGlwbGUsIGNsb3NlIHRoZSBvcGVuIGFjY29yZGlvblxuXHRcdFx0XHRcdGlmICghYWxsb3dNdWx0aXBsZSAmJiBhY3RpdmUgJiYgYWN0aXZlICE9PSB0YXJnZXQpIHtcblx0XHRcdFx0XHRcdC8vIFNldCB0aGUgZXhwYW5kZWQgc3RhdGUgb24gdGhlIHRyaWdnZXJpbmcgZWxlbWVudFxuXHRcdFx0XHRcdFx0YWN0aXZlLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiKTtcblx0XHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cblx0XHRcdFx0XHRcdGRvY3VtZW50XG5cdFx0XHRcdFx0XHRcdC5nZXRFbGVtZW50QnlJZChhY3RpdmUuZ2V0QXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiKSlcblx0XHRcdFx0XHRcdFx0LnNldEF0dHJpYnV0ZShcImhpZGRlblwiLCBcIlwiKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2hlbiB0b2dnbGluZyBpcyBub3QgYWxsb3dlZCwgY2xlYW4gdXAgZGlzYWJsZWQgc3RhdGVcblx0XHRcdFx0XHRcdGlmICghYWxsb3dUb2dnbGUpIHtcblx0XHRcdFx0XHRcdFx0YWN0aXZlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFpc0V4cGFuZGVkKSB7XG5cdFx0XHRcdFx0XHQvLyBTZXQgdGhlIGV4cGFuZGVkIHN0YXRlIG9uIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnRcblx0XHRcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwidHJ1ZVwiKTtcblx0XHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cblx0XHRcdFx0XHRcdGRvY3VtZW50XG5cdFx0XHRcdFx0XHRcdC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiKSlcblx0XHRcdFx0XHRcdFx0LnJlbW92ZUF0dHJpYnV0ZShcImhpZGRlblwiKTtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdG9nZ2xpbmcgaXMgbm90IGFsbG93ZWQsIHNldCBkaXNhYmxlZCBzdGF0ZSBvbiB0cmlnZ2VyXG5cdFx0XHRcdFx0XHRpZiAoIWFsbG93VG9nZ2xlKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGFsbG93VG9nZ2xlICYmIGlzRXhwYW5kZWQpIHtcblx0XHRcdFx0XHRcdC8vIFNldCB0aGUgZXhwYW5kZWQgc3RhdGUgb24gdGhlIHRyaWdnZXJpbmcgZWxlbWVudFxuXHRcdFx0XHRcdFx0dGFyZ2V0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiKTtcblx0XHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFjY29yZGlvbiBzZWN0aW9ucywgdXNpbmcgYXJpYS1jb250cm9scyB0byBzcGVjaWZ5IHRoZSBkZXNpcmVkIHNlY3Rpb25cblx0XHRcdFx0XHRcdGRvY3VtZW50XG5cdFx0XHRcdFx0XHRcdC5nZXRFbGVtZW50QnlJZCh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiKSlcblx0XHRcdFx0XHRcdFx0LnNldEF0dHJpYnV0ZShcImhpZGRlblwiLCBcIlwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQmluZCBrZXlib2FyZCBiZWhhdmlvcnMgb24gdGhlIG1haW4gYWNjb3JkaW9uIGNvbnRhaW5lclxuXHRcdFx0YWNjb3JkaW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHZhciBrZXkgPSBldmVudC53aGljaC50b1N0cmluZygpO1xuXHRcdFx0XHQvLyAzMyA9IFBhZ2UgVXAsIDM0ID0gUGFnZSBEb3duXG5cdFx0XHRcdHZhciBjdHJsTW9kaWZpZXIgPSBldmVudC5jdHJsS2V5ICYmIGtleS5tYXRjaCgvMzN8MzQvKTtcblxuXHRcdFx0XHQvLyBJcyB0aGlzIGNvbWluZyBmcm9tIGFuIGFjY29yZGlvbiBoZWFkZXI/XG5cdFx0XHRcdGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWNjb3JkaW9uX190cmlnZ2VyXCIpKSB7XG5cdFx0XHRcdFx0Ly8gVXAvIERvd24gYXJyb3cgYW5kIENvbnRyb2wgKyBQYWdlIFVwLyBQYWdlIERvd24ga2V5Ym9hcmQgb3BlcmF0aW9uc1xuXHRcdFx0XHRcdC8vIDM4ID0gVXAsIDQwID0gRG93blxuXHRcdFx0XHRcdGlmIChrZXkubWF0Y2goLzM4fDQwLykgfHwgY3RybE1vZGlmaWVyKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5kZXggPSB0cmlnZ2Vycy5pbmRleE9mKHRhcmdldCk7XG5cdFx0XHRcdFx0XHR2YXIgZGlyZWN0aW9uID0ga2V5Lm1hdGNoKC8zNHw0MC8pID8gMSA6IC0xO1xuXHRcdFx0XHRcdFx0dmFyIGxlbmd0aCA9IHRyaWdnZXJzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHZhciBuZXdJbmRleCA9IChpbmRleCArIGxlbmd0aCArIGRpcmVjdGlvbikgJSBsZW5ndGg7XG5cblx0XHRcdFx0XHRcdHRyaWdnZXJzW25ld0luZGV4XS5mb2N1cygpO1xuXG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoa2V5Lm1hdGNoKC8zNXwzNi8pKSB7XG5cdFx0XHRcdFx0XHQvLyAzNSA9IEVuZCwgMzYgPSBIb21lIGtleWJvYXJkIG9wZXJhdGlvbnNcblx0XHRcdFx0XHRcdHN3aXRjaCAoa2V5KSB7XG5cdFx0XHRcdFx0XHRcdC8vIEdvIHRvIGZpcnN0IGFjY29yZGlvblxuXHRcdFx0XHRcdFx0XHRjYXNlIFwiMzZcIjpcblx0XHRcdFx0XHRcdFx0XHR0cmlnZ2Vyc1swXS5mb2N1cygpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHQvLyBHbyB0byBsYXN0IGFjY29yZGlvblxuXHRcdFx0XHRcdFx0XHRjYXNlIFwiMzVcIjpcblx0XHRcdFx0XHRcdFx0XHR0cmlnZ2Vyc1t0cmlnZ2Vycy5sZW5ndGggLSAxXS5mb2N1cygpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChjdHJsTW9kaWZpZXIpIHtcblx0XHRcdFx0XHQvLyBDb250cm9sICsgUGFnZSBVcC8gUGFnZSBEb3duIGtleWJvYXJkIG9wZXJhdGlvbnNcblx0XHRcdFx0XHQvLyBDYXRjaGVzIGV2ZW50cyB0aGF0IGhhcHBlbiBpbnNpZGUgb2YgcGFuZWxzXG5cdFx0XHRcdFx0cGFuZWxzLmZvckVhY2goZnVuY3Rpb24ocGFuZWwsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRpZiAocGFuZWwuY29udGFpbnModGFyZ2V0KSkge1xuXHRcdFx0XHRcdFx0XHR0cmlnZ2Vyc1tpbmRleF0uZm9jdXMoKTtcblxuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gTWlub3Igc2V0dXA6IHdpbGwgc2V0IGRpc2FibGVkIHN0YXRlLCB2aWEgYXJpYS1kaXNhYmxlZCwgdG8gYW5cblx0XHRcdC8vIGV4cGFuZGVkLyBhY3RpdmUgYWNjb3JkaW9uIHdoaWNoIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHRvZ2dsZWQgY2xvc2Vcblx0XHRcdGlmICghYWxsb3dUb2dnbGUpIHtcblx0XHRcdFx0Ly8gR2V0IHRoZSBmaXJzdCBleHBhbmRlZC8gYWN0aXZlIGFjY29yZGlvblxuXHRcdFx0XHR2YXIgZXhwYW5kZWQgPSBhY2NvcmRpb24ucXVlcnlTZWxlY3RvcignW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7XG5cblx0XHRcdFx0Ly8gSWYgYW4gZXhwYW5kZWQvIGFjdGl2ZSBhY2NvcmRpb24gaXMgZm91bmQsIGRpc2FibGVcblx0XHRcdFx0aWYgKGV4cGFuZGVkKSB7XG5cdFx0XHRcdFx0ZXhwYW5kZWQuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCBcInRydWVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9hY2NvcmRpb24uanMiXSwic291cmNlUm9vdCI6IiJ9